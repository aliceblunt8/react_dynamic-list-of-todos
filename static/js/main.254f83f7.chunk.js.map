{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.js","index.js"],"names":["getTodos","a","fetch","promise","json","getUser","userId","TodoList","todos","selectUser","handleInput","handleSelect","checkTodo","className","placeholder","onChange","event","target","value","map","todo","key","id","type","readOnly","checked","completed","title","onClick","CurrentUser","user","handleClearButton","name","email","phone","App","state","todosFromServer","selectedUserId","selectedUser","setUser","then","setState","data","clearUser","filterByValue","inputValue","filter","includes","filterByStatus","selectValue","updateTodoStatus","list","initialTodos","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.254f83f7.chunk.js","sourcesContent":["const API_TODOS = 'https://mate-api.herokuapp.com/todos';\nconst API_USERS = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = async() => {\n  const promise = await fetch(API_TODOS);\n\n  return promise.json();\n};\n\nexport const getUser = async(userId) => {\n  const promise = await fetch(`${API_USERS}/${userId}`);\n\n  return promise.json();\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = (\n  { todos,\n    selectUser,\n    handleInput,\n    handleSelect,\n    checkTodo },\n) => {\n  const handleClick = (userId) => {\n    selectUser(userId);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        placeholder=\"Filter todo by title\"\n        onChange={event => handleInput(event.target.value)}\n      />\n\n      <select onChange={event => handleSelect(event.target.value)}>\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li key={todo.id} className=\"TodoList__item\">\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n                onChange={() => checkTodo(todo.id)}\n              />\n              {todo.title}\n            </label>\n\n            <button\n              type=\"button\"\n              onClick={() => handleClick(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleInput: PropTypes.func.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ user, handleClearButton }) => (\n  <div className=\"CurrentUser\">\n    <h2>{`Selected user: ${user.id}`}</h2>\n    <ul>\n      <li>{user.name}</li>\n      <li>{user.email}</li>\n      <li>{user.phone}</li>\n    </ul>\n    <button\n      type=\"button\"\n      onClick={handleClearButton}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  }).isRequired,\n  handleClearButton: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport { getTodos, getUser } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todosFromServer: [],\n    todos: [],\n    selectedUserId: 0,\n    selectedUser: {},\n  };\n\n  componentDidMount() {\n    getTodos().then((list) => {\n      const initialTodos = list.data.filter(todo => todo.title);\n\n      this.setState({\n        todosFromServer: initialTodos,\n        todos: initialTodos,\n      });\n    });\n  }\n\n  setUser = (userId) => {\n    if (userId === this.state.selectedUserId) {\n      return;\n    }\n\n    getUser(userId).then(user => this.setState({\n      selectedUser: user.data,\n      selectedUserId: userId,\n    }));\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0, selectedUser: {},\n    });\n  }\n\n  filterByValue = (inputValue) => {\n    this.setState(state => ({\n      todos: state.todosFromServer.filter(\n        todo => todo.title.includes(inputValue),\n      ),\n    }));\n  }\n\n  filterByStatus = (selectValue) => {\n    switch (selectValue) {\n      case 'all':\n        this.setState(state => ({\n          todos: state.todosFromServer,\n        }));\n        break;\n      case 'active':\n        this.setState(state => ({\n          todos: state.todosFromServer.filter(todo => !todo.completed),\n        }));\n        break;\n      case 'completed':\n        this.setState(state => ({\n          todos: state.todosFromServer.filter(todo => todo.completed),\n        }));\n        break;\n      default:\n    }\n  }\n\n  updateTodoStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== +id) {\n          return { ...todo };\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n\n    this.setState(state => ({\n      todosFromServer: state.todos,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.setUser}\n            handleInput={this.filterByValue}\n            handleSelect={this.filterByStatus}\n            checkTodo={this.updateTodoStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedUserId ? (\n            <CurrentUser\n              user={selectedUser}\n              handleClearButton={this.clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}