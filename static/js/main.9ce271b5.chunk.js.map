{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.js","index.js"],"names":["getUser","userId","fetch","then","response","json","result","data","TodoList","todos","selectUser","handleInput","handleSelect","checkTodo","className","placeholder","onChange","event","target","value","map","todo","key","id","type","readOnly","checked","completed","title","onClick","CurrentUser","state","user","this","props","setState","prevProps","handleClearButton","name","email","phone","React","Component","App","todosFromServer","selectedUserId","setUser","clearUser","filterByValue","inputValue","filter","includes","filterByStatus","selectValue","updateTodoStatus","list","initialTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ce271b5.chunk.js","sourcesContent":["const API_TODOS = 'https://mate-api.herokuapp.com/todos';\nconst API_USERS = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(API_TODOS)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = userId => fetch(`${API_USERS}/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  handleInput,\n  handleSelect,\n  checkTodo,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      placeholder=\"Filter todo by title\"\n      onChange={event => handleInput(event.target.value)}\n    />\n\n    <select onChange={event => handleSelect(event.target.value)}>\n      <option value=\"all\">All</option>\n      <option value=\"active\">Active</option>\n      <option value=\"completed\">Completed</option>\n    </select>\n\n    <ul className=\"TodoList__list\">\n      {todos.map(todo => (\n        <li key={todo.id} className=\"TodoList__item\">\n          <label>\n            <input\n              type=\"checkbox\"\n              readOnly\n              checked={todo.completed}\n              onChange={() => checkTodo(todo.id)}\n            />\n            {todo.title}\n          </label>\n\n          <button\n            type=\"button\"\n            onClick={() => selectUser(todo.userId)}\n          >\n            {`User #${todo.userId}`}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleInput: PropTypes.func.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { handleClearButton } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2>{`Selected user: ${user.id}`}</h2>\n        <ul>\n          <li>{user.name}</li>\n          <li>{user.email}</li>\n          <li>{user.phone}</li>\n        </ul>\n        <button\n          type=\"button\"\n          onClick={handleClearButton}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  handleClearButton: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todosFromServer: [],\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then((list) => {\n      const initialTodos = list.filter(todo => todo.title);\n\n      this.setState({\n        todosFromServer: initialTodos,\n        todos: initialTodos,\n      });\n    });\n  }\n\n  setUser = (userId) => {\n    if (userId === this.state.selectedUserId) {\n      return;\n    }\n\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  filterByValue = (inputValue) => {\n    this.setState(state => ({\n      todos: state.todosFromServer.filter(\n        todo => todo.title.includes(inputValue),\n      ),\n    }));\n  }\n\n  filterByStatus = (selectValue) => {\n    switch (selectValue) {\n      case 'all':\n        this.setState(state => ({\n          todos: state.todosFromServer,\n        }));\n        break;\n      case 'active':\n        this.setState(state => ({\n          todos: state.todosFromServer.filter(todo => !todo.completed),\n        }));\n        break;\n      case 'completed':\n        this.setState(state => ({\n          todos: state.todosFromServer.filter(todo => todo.completed),\n        }));\n        break;\n      default:\n    }\n  }\n\n  updateTodoStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== +id) {\n          return { ...todo };\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.setUser}\n            handleInput={this.filterByValue}\n            handleSelect={this.filterByStatus}\n            checkTodo={this.updateTodoStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              handleClearButton={this.clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}